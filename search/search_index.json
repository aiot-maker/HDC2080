{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"HDC2080 Module We use a module manufactured by CJMCU which is designed around the Texas Instrument HDC2080 integrated circuit. Description The HDC2080 is a digital humidity and temperature sensor with some appealing features: High accuracy Low power consumption I2C interface Programmable thresholds Data Ready / Interruput pin Powering the module - 3.3V only The integrated circuit has a supply voltage range of 1.6V to 3.6V. The module doesn\u00b4t have a voltage regulator therefore it can only be powered by 3.3V. Pinout SDC SLA are the I2C pins GND , VCC are the power supply pins ADD , this input pin allows to select an alternative I2C bus address for the module. When disconnected or connected to GND the module will appear to the bus with 0x40 address. When this pin is connected to 3.3V the I2C address will be 0x41. INT , this output pin can be used to signal that a measurement is available in the registers or be used to signal temperature or humidity thresholds.","title":"Module"},{"location":"#hdc2080","text":"","title":"HDC2080"},{"location":"#module","text":"We use a module manufactured by CJMCU which is designed around the Texas Instrument HDC2080 integrated circuit.","title":"Module"},{"location":"#description","text":"The HDC2080 is a digital humidity and temperature sensor with some appealing features: High accuracy Low power consumption I2C interface Programmable thresholds Data Ready / Interruput pin","title":"Description"},{"location":"#powering-the-module-33v-only","text":"The integrated circuit has a supply voltage range of 1.6V to 3.6V. The module doesn\u00b4t have a voltage regulator therefore it can only be powered by 3.3V.","title":"Powering the module - 3.3V only"},{"location":"#pinout","text":"SDC SLA are the I2C pins GND , VCC are the power supply pins ADD , this input pin allows to select an alternative I2C bus address for the module. When disconnected or connected to GND the module will appear to the bus with 0x40 address. When this pin is connected to 3.3V the I2C address will be 0x41. INT , this output pin can be used to signal that a measurement is available in the registers or be used to signal temperature or humidity thresholds.","title":"Pinout"},{"location":"amm/","text":"Auto measurement mode How it works The HDC2080 sensor has two modes of operation to generate measurements. The auto measurement mode triggers measurements in programmable intervals that can range from a slow 1 sample every 2 minutes to a fast pace of 5 samples per second. It is hard to imagine in which use case someone would need to generate temperature values every five seconds, especially for a sensor like this one which is used to sense ambient temperature. The second mode of operation is triggering them with I2C commands, a kind of reading on demand. What is the best mode of operation ? It really depends on what you need. If you build a stand alone temperature and humidity device, lets say using the HDC2080 connected to a microcontroller and using an OLED display then surely you want to active the auto measurement. Now if you hook up the HDC2080 to a single board computer, like the Raspberry PI, and uses Node-RED to control an automation system then most likely you won\u00b4t need auto measurement. You can grab temperature and humidity data as you need. In our examples in this tutorial we will disable the auto measurement mode and trigger readings via I2C. Auto measurement can be tricky There is something you will need to overcome when using the auto measurement mode. It may happen that you issue an I2C command to read the temperature and humidity registers at the exact time the HDC2080 is updating its internal registers. That can lead to wrong readings. It is not difficult to reproduce this issue. Just program the device to generate 5 samples per second and start reading the temperature and humidity registers at random. Not even the interrupt pin can help you to circumvent this issue. Apparently the HDC2080 does not have a mechanism to avoid this from happening, at least that I am aware of.","title":"Auto measurement mode"},{"location":"amm/#auto-measurement-mode","text":"","title":"Auto measurement mode"},{"location":"amm/#how-it-works","text":"The HDC2080 sensor has two modes of operation to generate measurements. The auto measurement mode triggers measurements in programmable intervals that can range from a slow 1 sample every 2 minutes to a fast pace of 5 samples per second. It is hard to imagine in which use case someone would need to generate temperature values every five seconds, especially for a sensor like this one which is used to sense ambient temperature. The second mode of operation is triggering them with I2C commands, a kind of reading on demand.","title":"How it works"},{"location":"amm/#what-is-the-best-mode-of-operation","text":"It really depends on what you need. If you build a stand alone temperature and humidity device, lets say using the HDC2080 connected to a microcontroller and using an OLED display then surely you want to active the auto measurement. Now if you hook up the HDC2080 to a single board computer, like the Raspberry PI, and uses Node-RED to control an automation system then most likely you won\u00b4t need auto measurement. You can grab temperature and humidity data as you need. In our examples in this tutorial we will disable the auto measurement mode and trigger readings via I2C.","title":"What is the best mode of operation ?"},{"location":"amm/#auto-measurement-can-be-tricky","text":"There is something you will need to overcome when using the auto measurement mode. It may happen that you issue an I2C command to read the temperature and humidity registers at the exact time the HDC2080 is updating its internal registers. That can lead to wrong readings. It is not difficult to reproduce this issue. Just program the device to generate 5 samples per second and start reading the temperature and humidity registers at random. Not even the interrupt pin can help you to circumvent this issue. Apparently the HDC2080 does not have a mechanism to avoid this from happening, at least that I am aware of.","title":"Auto measurement can be tricky"},{"location":"calibration/","text":"Calibration It is not necessary to calibrate the sensor as it is presumably calibrated during manufacturing. I did not have the opportunitty to check how accurate is the measurement. Unfortunately I lack a device that could give me a precise reference temperature and humidity for comparison. Anyway, if you ever diagnose that you device is not well calibrated you have the possibility to add a fixed offset, positive or negative, to the readings. This is done with the use of two purpose specific registers available in the HDC2080.","title":"Calibration"},{"location":"calibration/#calibration","text":"It is not necessary to calibrate the sensor as it is presumably calibrated during manufacturing. I did not have the opportunitty to check how accurate is the measurement. Unfortunately I lack a device that could give me a precise reference temperature and humidity for comparison. Anyway, if you ever diagnose that you device is not well calibrated you have the possibility to add a fixed offset, positive or negative, to the readings. This is done with the use of two purpose specific registers available in the HDC2080.","title":"Calibration"},{"location":"configurationregister/","text":"Configuration register (0x0E) You already know that the HDC2080 has two modes of operation in regards to reading values. You change the operating mode with 3 bits from this register to program the sample rate for the measurements or to disable this auto measurement mode allowing readings only via I2C. Heater The heater is a built-in mechanism in the silicon added to prevent condensation that will interfere with measurements. As explained in the device datasheet the sensor will suffer an offset in humidity readins in case it is exposed to high humidity for a long time. Wise use of the heater can avoid this situation. Heating, if necessary, should be strickly controlled by your application software and should not remain activated for a long time. And long time in this case is few seconds. The heating process will rise the temperature of the whole integrated circuit and you have to avoid reaching the maximum dictate by the specifications, which is 85\u00ba celsius. Also take into consideration that heating draws a lot of current and therefore power, compared with the normal consumption without heating. We wil build a Node-RED flow that will heat the device for a few seconds and read the temperature sensor to see this feature working. Interrupt mode As you can see in the datasheet table for this register there are two modes for using the interrupt pin: level lensitivity and comparator. Basically these modoes determine how long the interrupt pin, once activated, will keep active. You can use the level sensivity mode whereby the pin will change dinamically following the value it is tracking. Alternatively you can use it the the comparator mode where it will work like as flag that is raised and will remain in that way until you read the register. This is more or less like a mailbox flag used in United States, where the postman will raise the flag to signal you that mail arrived. Once you grab the mail you move the lever down so no one else in your home will bother going to take the mail.","title":"Configuration register"},{"location":"configurationregister/#configuration-register-0x0e","text":"You already know that the HDC2080 has two modes of operation in regards to reading values. You change the operating mode with 3 bits from this register to program the sample rate for the measurements or to disable this auto measurement mode allowing readings only via I2C.","title":"Configuration register (0x0E)"},{"location":"configurationregister/#heater","text":"The heater is a built-in mechanism in the silicon added to prevent condensation that will interfere with measurements. As explained in the device datasheet the sensor will suffer an offset in humidity readins in case it is exposed to high humidity for a long time. Wise use of the heater can avoid this situation. Heating, if necessary, should be strickly controlled by your application software and should not remain activated for a long time. And long time in this case is few seconds. The heating process will rise the temperature of the whole integrated circuit and you have to avoid reaching the maximum dictate by the specifications, which is 85\u00ba celsius. Also take into consideration that heating draws a lot of current and therefore power, compared with the normal consumption without heating. We wil build a Node-RED flow that will heat the device for a few seconds and read the temperature sensor to see this feature working.","title":"Heater"},{"location":"configurationregister/#interrupt-mode","text":"As you can see in the datasheet table for this register there are two modes for using the interrupt pin: level lensitivity and comparator. Basically these modoes determine how long the interrupt pin, once activated, will keep active. You can use the level sensivity mode whereby the pin will change dinamically following the value it is tracking. Alternatively you can use it the the comparator mode where it will work like as flag that is raised and will remain in that way until you read the register. This is more or less like a mailbox flag used in United States, where the postman will raise the flag to signal you that mail arrived. Once you grab the mail you move the lever down so no one else in your home will bother going to take the mail.","title":"Interrupt mode"},{"location":"flowmanufacturer/","text":"Read manufacturer ID In this first flow we will do something very simple: read the registers that holds the manufacturer ID. These are the registers 0xFC and 0xFD. For that purpose we will use a function node. The code used is straightforward. We open the bus and read a 16-bit word with and then close the bus. The reading is formatted to be displayes as an hexadecimal value. Here below the code inside the funcion node: const HDC2080_I2C = 0x40; const hdc = i2c.openSync(1); let r1 = hdc.readByteSync(HDC2080_I2C, 0xFC); let r2 = hdc.readByteSync(HDC2080_I2C, 0xFD); hdc.closeSync(); msg.payload = `Manufacturer ID: 0x${r2.toString(16)}${r1.toString(16)}` return msg; Below the flow: Below the result in the debug panel: But.. wait. The datasheet says we should read 0x4954. Maybe your code is wrong ? I don\u00b4t think so. Most likely there is a typo in the datasheet. Or perhaps I am using a counterfeit device that had the manufacturer ID changed on purpose to avoid legal sanctions ? No, very unlikely.","title":"Read manufacturer ID"},{"location":"flowmanufacturer/#read-manufacturer-id","text":"In this first flow we will do something very simple: read the registers that holds the manufacturer ID. These are the registers 0xFC and 0xFD. For that purpose we will use a function node. The code used is straightforward. We open the bus and read a 16-bit word with and then close the bus. The reading is formatted to be displayes as an hexadecimal value. Here below the code inside the funcion node: const HDC2080_I2C = 0x40; const hdc = i2c.openSync(1); let r1 = hdc.readByteSync(HDC2080_I2C, 0xFC); let r2 = hdc.readByteSync(HDC2080_I2C, 0xFD); hdc.closeSync(); msg.payload = `Manufacturer ID: 0x${r2.toString(16)}${r1.toString(16)}` return msg; Below the flow: Below the result in the debug panel: But.. wait. The datasheet says we should read 0x4954. Maybe your code is wrong ? I don\u00b4t think so. Most likely there is a typo in the datasheet. Or perhaps I am using a counterfeit device that had the manufacturer ID changed on purpose to avoid legal sanctions ? No, very unlikely.","title":"Read manufacturer ID"},{"location":"i2c/","text":"I2C-bus library The library i2c-bus available in NPM will empower us to read and write to the registers of the HDC2080. Using Node.js libraries is easier then ever. As from Node-RED 1.3 it is possible to require a Node.js library from inside a function node. All you need to do is declare the library name and the variable name in the setup tab of the function node.","title":"i2C library"},{"location":"i2c/#i2c-bus-library","text":"The library i2c-bus available in NPM will empower us to read and write to the registers of the HDC2080. Using Node.js libraries is easier then ever. As from Node-RED 1.3 it is possible to require a Node.js library from inside a function node. All you need to do is declare the library name and the variable name in the setup tab of the function node.","title":"I2C-bus library"},{"location":"interruptregisters/","text":"Interrupt registers Interrupt status register (0x04) Here is another register quickly mentioned but important. In general (but not necessarily) this register is configured only once. This register will determine which value the interrupt pin will track. In our case, as we want to track new temperature and humidity values, we will use it as data ready pin. You can however use it to signal humidity and temperatue thresholds. Some restrictions apply to the use of the interrupt pin. It can only be assigned to one measurement or threshold. it can not, for instance, signal temperature threshold exceeeded and at the same time be used to signal humidity threshold. Interrupt configuration register (0x07)","title":"Interrupt registers"},{"location":"interruptregisters/#interrupt-registers","text":"","title":"Interrupt registers"},{"location":"interruptregisters/#interrupt-status-register-0x04","text":"Here is another register quickly mentioned but important. In general (but not necessarily) this register is configured only once. This register will determine which value the interrupt pin will track. In our case, as we want to track new temperature and humidity values, we will use it as data ready pin. You can however use it to signal humidity and temperatue thresholds. Some restrictions apply to the use of the interrupt pin. It can only be assigned to one measurement or threshold. it can not, for instance, signal temperature threshold exceeeded and at the same time be used to signal humidity threshold.","title":"Interrupt status register (0x04)"},{"location":"interruptregisters/#interrupt-configuration-register-0x07","text":"","title":"Interrupt configuration register (0x07)"},{"location":"measurementregister/","text":"Measurement register (0x0F) I will only briefly mention this register but it is crucial for this tutorial. There is one bit in this register that will trigger a measurement via I2C when it is set to value one. We will configure later a Node-RED node to set this bit whenever we want to force the HDC2080 to generate and store a new measurement. Note that this register allows also to configure the resolution of our measurements but we will not touch this configuration as we always want to work with the most precise resolution of 14 bits. This is as simple as writing the value 0x01 to the register.","title":"Measurement register"},{"location":"measurementregister/#measurement-register-0x0f","text":"I will only briefly mention this register but it is crucial for this tutorial. There is one bit in this register that will trigger a measurement via I2C when it is set to value one. We will configure later a Node-RED node to set this bit whenever we want to force the HDC2080 to generate and store a new measurement. Note that this register allows also to configure the resolution of our measurements but we will not touch this configuration as we always want to work with the most precise resolution of 14 bits. This is as simple as writing the value 0x01 to the register.","title":"Measurement register (0x0F)"},{"location":"reading/","text":"Reading temperature and humidity How to get humidity and temperature values The sensor will remain in sleep mode until a measurement is triggered. There is a set of three bits in the registers that will tell the sensor to work in auto measurements mode or wait for an I2C command to trigger a single measurement. The values of the measurement are converted from analog to digital and stored in specific registers from where you can read the values. It is possible to configure the sensor to signal in the physical interrupt pin the availability of new measurements. Reading temperature Temperature is stored by the sensor in registers 0x00 and 0x01. Register 0x00 holds the least significant bits (bits0 to 7) and 0x01 the most significant bits (bits 8 to 15). As a matter of fact only 14 bits are used but this won\u00b4t change how you read the value. As the measurement value is stored in two 8-byte registers you have a couple of ways to get it. The first alternative is programming your computer or microcontroler to read two consecutive bytes. First read the register 0x00 and then read register 0x01. The other alternative is reading both registers in a single shot as a 16 bit word. Whatever is the way you get the value it is necessary to apply a formula afterward to make sense of the value. Temperature is translated to degrees centigrade. In JavaScript this formula can be written as below if you read the registers as byte values: msg.payload = (((256 * r2) + r1) / 65536) * 165 - 40.5; where r1 is the reading of the least significant value and r2 the reading of the most significant value. Now, if you read a single 16 bit value then you want to use a slightly different formula: msg.payload = (r / 65536) * 165 - 40.5; where r is the 16 bit value. Reading humidity It is almost the same in regards to reading humidity values but in this case you will get the values form registers 0x02 (least significant) and 0x03 (most significant). The formula to apply, according to the datasheet is: Humidity is given as a percentage. In JavaScript this formula can be written as below if you read the registers as byte values: msg.payload = (((256 * r2) + r1) / 65536) * 100; where r1 is the reading of the least significant value and r2 the reading of the most significant value. Likewise, the formula for humidity when you read the registers as a 16 bit value: msg.payload = r / 65536 * 100; One nice feature of the HDC2080 is that it can be used as a data logger for maximum values of temperature and humidity. These maximum values are stored in internal registers. This is available only for measurements triggered by I2C readings (will not work for auto measurement).","title":"Reading humidity and temperature"},{"location":"reading/#reading-temperature-and-humidity","text":"","title":"Reading temperature and humidity"},{"location":"reading/#how-to-get-humidity-and-temperature-values","text":"The sensor will remain in sleep mode until a measurement is triggered. There is a set of three bits in the registers that will tell the sensor to work in auto measurements mode or wait for an I2C command to trigger a single measurement. The values of the measurement are converted from analog to digital and stored in specific registers from where you can read the values. It is possible to configure the sensor to signal in the physical interrupt pin the availability of new measurements.","title":"How to get humidity and temperature values"},{"location":"reading/#reading-temperature","text":"Temperature is stored by the sensor in registers 0x00 and 0x01. Register 0x00 holds the least significant bits (bits0 to 7) and 0x01 the most significant bits (bits 8 to 15). As a matter of fact only 14 bits are used but this won\u00b4t change how you read the value. As the measurement value is stored in two 8-byte registers you have a couple of ways to get it. The first alternative is programming your computer or microcontroler to read two consecutive bytes. First read the register 0x00 and then read register 0x01. The other alternative is reading both registers in a single shot as a 16 bit word. Whatever is the way you get the value it is necessary to apply a formula afterward to make sense of the value. Temperature is translated to degrees centigrade. In JavaScript this formula can be written as below if you read the registers as byte values: msg.payload = (((256 * r2) + r1) / 65536) * 165 - 40.5; where r1 is the reading of the least significant value and r2 the reading of the most significant value. Now, if you read a single 16 bit value then you want to use a slightly different formula: msg.payload = (r / 65536) * 165 - 40.5; where r is the 16 bit value.","title":"Reading temperature"},{"location":"reading/#reading-humidity","text":"It is almost the same in regards to reading humidity values but in this case you will get the values form registers 0x02 (least significant) and 0x03 (most significant). The formula to apply, according to the datasheet is: Humidity is given as a percentage. In JavaScript this formula can be written as below if you read the registers as byte values: msg.payload = (((256 * r2) + r1) / 65536) * 100; where r1 is the reading of the least significant value and r2 the reading of the most significant value. Likewise, the formula for humidity when you read the registers as a 16 bit value: msg.payload = r / 65536 * 100; One nice feature of the HDC2080 is that it can be used as a data logger for maximum values of temperature and humidity. These maximum values are stored in internal registers. This is available only for measurements triggered by I2C readings (will not work for auto measurement).","title":"Reading humidity"},{"location":"registers/","text":"Register Map Programming and using the HDC2080 is not complicated if we understand the register map. There are 20 registers in the device. Most of them are read-only. We will write bytes to few of them to program the behaviour of our device. Some of these registers wil probably never be used. Table from TI datasheet","title":"Registers"},{"location":"registers/#register-map","text":"Programming and using the HDC2080 is not complicated if we understand the register map. There are 20 registers in the device. Most of them are read-only. We will write bytes to few of them to program the behaviour of our device. Some of these registers wil probably never be used. Table from TI datasheet","title":"Register Map"},{"location":"thresholds/","text":"Thresholds What is the threshold features It is possible to program the sensor to trigger an interruption when the temperature or humidity reaches a value too high or too low. These maximum and minimum values (thresholds) are configurable. There are four registers that can be programmed to store them. This feature can be useful in a number of use cases but not necessarily used in others.","title":"Thresholds"},{"location":"thresholds/#thresholds","text":"","title":"Thresholds"},{"location":"thresholds/#what-is-the-threshold-features","text":"It is possible to program the sensor to trigger an interruption when the temperature or humidity reaches a value too high or too low. These maximum and minimum values (thresholds) are configurable. There are four registers that can be programmed to store them. This feature can be useful in a number of use cases but not necessarily used in others.","title":"What is the threshold features"}]}